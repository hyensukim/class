11/28

1. java.lang 패키지
 - 컴파일러가 import java.lang.*; 를 자동으로 추가.
 - Object class : 모든 클래스의 super.

String
Exception

1. Object 클래스
 - 모든 클래스의 상위 클래스
 - extends Object를 자동 추가(컴파일러)

2. Object 클래스의 equals(), hashCode();
 - equals() : 두 값이 같은지 논리형 리턴하는 메서드.
  -->    public boolean equals(Object obj) {
           return (this == obj); // 객체의 참조 주소값을 비교(객체의 힙메모리의 물리적 위치 일치)
	this - 자신 객체
	Object obj - 비교 대상 객체
 - Class getClass() : 클래스의 정보를 확인하는 메서드.
  -> getName() : 패키지명을 포함한 클래스명
 - hashCode() : 인스턴스의 주소값(hash -> 검색)
 - toString() : 객체를 출력하면 자동으로 호출되는 메서드.
 - Object, - String toString() : 클래스명 + 객체 주소가 담긴 값.(디폴트)
   String, - String toString() : 재정의하여 사용함.
 - Object, - boolean equals() : 물리적 동일성 O(주소값)
   String, - boolean equals() : 논리적 동일성 재정의 abc = abc
 - Object, - int hashCode() : 물리적 동일성
   String, - int hashCode() : 논리적 동일성
 - 논리적 동일성 확인을 위해 규칙처럼 사용하는 메서드 : equals(), hashCode()
 
 java.utils.Objects : Object 클래스 편의 기능
 java.utils.Arrays : 배열 편의기능
 java.utils.Collections : 

... : 가변 매개변수

3. String 클래스
 - 선언하는 방법 2가지
 1) String str = new String("abc");
 2) String str = "abc";

 - 문자열 불변
 : 문자열 = 문자가 여러개 나열되어 있는것.
 charSequence[] value JDK 12이후  private final byte[] value
 -> 'final' 변경불가 -> 문자열 객체는 변경 불가;

 - 문자열 결합
  : +연산자
  -> 문자를 결합할 때마다 새로운 문자열 객체 생성 -> 메모리 낭비(성능 저하)
  -> 이를, 해결하기 위해서 Buffer, Builder라는 것들이 있음.

4. StringBuffer, StringBuilder // byte[] value; 버퍼
 - capacity : Buffer의 크기(배열의 크기 : 16)
 - byte[] value = new byte[16];
 - 문자열을 많이 사용하는 경우, StringBuffer를 사용한다.

Wrapper 클래스
 - Wrap : 감싸다.
 - 기본 자료형을 감싼 클래스
 - 각 기본 자료형의 Wrapper 클래스
 - 정수 : Byte, Short, Integer, Long
 - 문자 : Character
 - 논리 : Boolean
 - 실수 : Float, Double
 - class Integer{
 ...
 final int value; // 
 ...
}
 - parse : 원래 자료형으로 변환, format : 특정 형식으로 문자열 변환

 - 오토박싱 / 언박싱
  -> 연산시에도 자동으로 됨.
//객체를 기본 자료형에 대입하는 경우
int num3 = num1; // Integer num1// 래퍼클래스 -> 기본자료형 자동 변환(언 박싱)
//int num3 = num1.intValue(10); -> 자동으로 내부적으로 intValue가 호출되어 오류가 발생되지 않음.
System.out.println(num3);
		
int num4 = 40;
Integer num5 = num4;// 기본자료형 -> 래퍼클래스 자동 변환(오토 박싱)
//Integer num5 = Unteger.valueOf(num4);

숙제!!
String 클래스 관련 메서드 읽어보기