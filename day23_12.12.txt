깃허브로 개인 포트폴리오 -> 발표 자료 같은것들

12/12
쓰레드

1. 프로세스와 쓰레드
 - 프로세스? 
  -. 현재 실행중인 프로그램.
  -. 프로세스 = 데이터, 메모리 + 쓰레드
  -. 쓰레드(주가 되는 함수 + *호출 스택 = 작업대)
  + 기능(함수)
   -> 주가 되는 함수 - main + 호출 스택 =Main 쓰레드

 - 멀티쓰레딩?
  -. CPU 자원의 효율적으로 사용이 가능.
  -. 동시에 실행되므로 사용자의 사용성 증대(장점)
  -. 동일한 데이터 자원을 공유
   -> 데이터 동기화 문제, 교착상태(단점)

2. 쓰레드의 구현과 실행
 1) Thread 클래스 상속
  - run() 메서드 구현
  - 상속은 단일이므로 기능 확장에 대한 제한이 발생.
 2) Runnable 인터페이스를 구현
  - run() 메서드 구현
  - Thread 생성자 매개변수로 사용 실행
  - 인터페이스는 기능확장이 더 유용함. -> 더 많이 사용 가능함.
 3) 실행
  - start() : 호출스택 + run() 실행

3. 싱글쓰레드와 멀티쓰레드
 - 이벤트 버튼 클릭하면 -> 메서지 출력. -> 다음 실행문이 막혀 실행되지 않음.
 - 힙메모리 : 인스턴스의 멤버변수
 -  Person p1 = new Person();
  -> p1 = null; -> GC(가비지컬렉터)가 메모리 제거
 - 시분할 방식(실제로 동시대에 하는 것이 아니라 빠르게 번갈아가면서 작동하는 것이다.)

4. 쓰레드의 우선순위
 - 1~10의 우선순위가 있음. / 코어?

5. 쓰레드 그룹(thread group)
 - ThreadGroup
  -. 모든 쓰레드는 그룹이 있다.
  -. main 그룹

6. 데몬 쓰레드(daemon thread) ex) GC,이벤트(눌러줄때까지 무한 루프)
 - 무한 반복(루프) while(true) {}
 - 특정 쓰레드에 종속되어있든 쓰레드
 - 특정 쓰레드가 종료 -> 데몬쓰레드 종료
 - setDaemon(true) : 데몬 쓰레드 생성 메서드

7. 쓰레드의 실행제어
 - 시작,중지,재시작 ...
 - 쓰레드의 실행을 제어.
 - sleep -> interruptedException : 지정된 시간동안 쓰레드를 일시정지.
 - join -> join으로 지정된 작업이 종료되면 join()을 호출한 쓰레드로 돌아와 실행을 계속한다. 

CPU ->멀티코어이다 보니, 여러 곳에서 동시다발적으로 작업을 수행하다보니 값의 오류가 발생.
 - 캐시 메모리
 - RAM : 값
 - volatile : 캐시메모리에서 데이터 접근하는 것이 아니고 메모리에서 직접 접근하는 예약어.

* 시간지연을 줄이기 위한 메서드들.

 1) interrupt() : 중단 요청.(중단을 하는것이 아닌 중단을 요청하는 것
  - 호출 interrupted - ture.
  - InterruptedException 발생.

 2) interrupted() : 현재 interrupted 상태 값 반환  -> false로 초기화.

 3) yield()
  - 다음 쓰레드에게 작업 양보

8. 쓰레드의 동기화


