12/01
★Calendar와 time의 차이점 -> Calendar는 객체 자신을 바꾸는 거였고, time은 복사하여 새로운
객체를 생성함.

복습
Temporal 인터페이스 : 시간 날짜
TemporalAccessor : 조회
TemporalAdjuster : 변경
 - LocalTime : 시간
 - LocalDateTime : 날짜 + 시간
 - ZonedDateTime : LocalDateTime + 시간대(Asia/Seoul)
   -. 섬머타임 시간 조정까지 반영// 환경 반영
 - OffsetDateTime : LocalDateTime + 시간대(+9) -> 이게 더 통용성이 좋음.
   -. UTC(0) + 9.0 // 시간대 차이대로 계산

TemporalAmount : 시간의양을 나타내는 인터페이스
 - Period : 날짜 간격
 - Duration : 시간 간격

java.time.temporal 패키지

 - TemporalField
  -. ChronoField(구현체)
 - TemporalUnit
  -. ChronoUnit(구현체)

java.time.format 패키지 : 형식화 고날녀
 - DateTimeFormat
  -. format()
  -. parse()

java.time 패키지

1. java.time 패키지의 해기삼 클래스

2. 객체 생성하기 - now(), of();
 - now() : 현재 날짜와 시간
 - of(...,...,...) : 특정날짜와 시간
  -. jdk1.8이후로 of() 가 객체생성 메서드로 많이 사용된다.

3. 특정 필드의 값 가져오기 - get(), getXXX()
 - TemporalField를 구현한 ChronoField 안에 get()이 구현.

4. 필드의 값 변경하기 - with(),plus(), minus()
 - with() : 변경
 - plus() : 날짜, 시간 증가
 - minus() : 날짜, 시간 감소

5. 날짜와 시간의 비교 - isAfter(), isBefore(), isEqual()
 - isAfter() : 시간 이후
 - isBefore() : 시간 이전
 - isEqual() : 동일 시간

6. instant
 - 시간의 물리적 양 -> long값으로 바꾼것.(1970.01.01 자정부터의 양, 천분의 1초)
 - EpochTime = TimeStamp -> 시간대(UTC 0 기준)

7. LocalDateTime과 ZonedDateTime
 - atZone(ZoneId...) -> ZoneId of("Asia/Seoul");
 - 썸머타임제와 같은 시간 변동도 반영

8.ZonedOffset
 - ZonedOffset of("+9");

9. OffsetDateTime

10. Period와 Duration
 - static between(정적)
 - until(인스턴스)

11.format()과 parse()
 - java.time.format 패키지
  -. DateTimeFormatter -> .ofPattern(패턴), .format(TemporalAccessor ...)

핵심클래스
 -.parse

===========================================================
Collections Framework
1.컬렉션 프레임워크란?
 - Collection(데이터 군, 많은데이터) + Framework(표준화된 설계)
 - 즉, 데이터군을 다루는 표준화된 설계
 - 표준의 기준 : 자료구조

Collection 
 1) List : 순차 자료구조
  - 순서가 있다(배열)

 2) Set : 집합 자료 구조 = 중복이 없는 자료 구조
  - 순서가 없는 자료 구조
ex)
A - 1,2,3,6
B - 3,4,5,6
A와 B 합집합 - 1,2,3,4,5,6
집합 -> 중복이 없는 자료 구조

Map : Diction 자료 구조 - 키워드 - 내용(사전에 첫자를 기준으로 단어가 나열되어 있는 구조)
 - 키와 값의 쌍으로 구성된 자료 구조.

2. 컬렉션 프레임워크의 핵심 인터페이스

3. List 인터페이스
 - 순차자료 구조(순서가 있는 자료 구조)
 - 인덱스 번호로 접근이 가능함.
 - 구현된 클래스
  1) ArrayList
  2) LinkedList
  3) Stack
  4) Vector

4. Set 인터페이스
 - 집합 자료구조 (중복이 없는 자료구조)
 - 순서가 없는 자료구조 -> 인덱스 번호가 X
 - 구현된 클래스
  1) HashSet
  2) TreeSet

5. Map 인터페이스
 - 키(keyword) - 값을 쌍으로 구성된 자료구조
 - 키(Key) : 값을 찾기 위한 키워드, 유일한 값(중복 X) : 집합 자료
 - 값(value) : 값은 중복 O
 - 순서 X
 - 구현된 클래스
  1) TreeMap
  2) HashMap
  3) Properties -> JDK 1.3 이전 Hashtable이 있음.
  4) 