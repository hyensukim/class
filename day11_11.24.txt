11/24

Inner class(내부 클래스)
1. 인스턴스 내부 클래스
 - instance 실체 : 생성된 객체(메모리 공간이 있음)
 - 멤버변수(인스턴스변수), 인스턴스 메서드와 동등하게 생각하면 됨.

2. 정적 내부 클래스
 - static : .class 파일이 처음 로더에 의해 로딩될 때, 초기화 되는 예약어.

3. ★★★지역 내부 클래스
 - 함수(메서드) 내부
 - 추상클래스, 인터페이스 객체 생성 조건
  -> 특정환경(메서드(함수) 내부, 멤버 변수)
  -> 구현된 메서드를 정의
  -> Runnable - run

4. 익명 내부 클래스

★인터페이스 추상클래스
 - 일반적으로 객체 생성이 불가하다. : 추상메서드(구현체가 없는 메서드, 구현만 되어 있다.)
 - 하지만, 특정환경에서 메서드를 정의하면 객체 생성이 가능하다.
  1) 환경 : 지역내부, 멤버 변수.
  2) 미 구현된(구현된) 메서드를 구현(정의)

=============================================================
예외 처리

구조 : Throwable <- Exception <- RuntimeException
Throwable : 던지다.

1. 오류와 예외
 - 오류(Error) - 시스템 문제
 - 예외(Exception) - 코드 상의 문제
  -> 프로그래머가 통제 가능한 상황.

2. 예외 클래스 종류
 - Exception(RuntimeException X) // 컴파일 시 체크되는 예외
  -> 예외가 처리되지 않으면 컴파일 자체가 X -> 프로그램 실행 X, 반드시 처리해야하는 예외.

 - RuntimeException // 실행 시 체크되는 예외
  -> 예외 처리하지 않아도 컴파일 시에는 문제 없으나, 프로그램 실행중에 체크되는 예외.
  -> Exception의 하위클래스

3. try -catch-finally 구문
 -구조
 try{
	//예외가 발생할수도 있는 구간
} catch(예외객체 ex) FileNotFoundException e -> 발생한 예외에 대한 정보) {
	//예외가 발생하면 유입되는 구간 -> 예외를 처리하는 구간.
}(finally){
	//예외가 발생하든 안하든 항상 실행되는 구간
}

- 다중 catch 구문
 : 예외가 여러개 발생 시, catch를 다중으로 사용함.
  -> try{} catch(예외객체 1){ }catch(예외객체 2){}


4.try resource

5. 예외 미루기(예외 전가)
 - 메서드를 호출하는 쪽에서 예외를 처리하도록 전가(throws)
 - RuntimeException이 아닌 Exception 객체만 해당.
  참고) RuntimeException 게열의 예외(실행중 체크되는 예외)는 따로 throws 명시 X.
   -> 유연한 예외처리가 가능.

6. 다중예외처리

7. 사용자 예외 정의




