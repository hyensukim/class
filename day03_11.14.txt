11.14
이전 수업내용 복습
연산자 내용

금일 수업
1. 조건문  - 참,거짓
1) if 구문
 - 구조
 if(참과 거짓) {
	// 참인 경우 실행되는 부분
 } 

2) if ~ else 구문
 - 구조
 if(조건문) {
	// 참일 때 실행되는 부분
 } else { 
	// 거짓일 때 실행되는 부분
 }
 
3) if ~ else if ~ else 구문
 - 구조
 if(조건1) {
	조건1 참인 경우에 실행.
} else if(조건2) {
	조건1이 거짓 & 조건2 참인 경우에 실행.// if 조건문은 위에서부터 순서대로 실행하기 때문임.
} else if(조건3) {
	조건 1 & 2 거짓이고 조건 3이 참인 경우에 실행.
} else {
	조건 1~ 3 모두 거짓인 경우 실행.
}
 (   ) : 조건을 체크하는 부분
 {   } : 프로그램이 실행되는 영역

2. 선택문 (switch,case,break, default)
 - 구조
 switc(키워드) {
 // 선택하여 조건이 일치하는 부분을 실행하는 구문
 case "단어1" : 
	      // 키워드 == 단어1 인경우 실행되는 영역
 case "단어2" :
	     // 키워드 == 단어2 인경우 실행되는 영역
 case "단어3" :
	     // 키워드 == 단어3 인경우 실행되는 영역
 default : 
 	     // 모든 case 일치하지 않은 경우 실행됨.(else와 동일)
}
 - switch case 선택문은 키워드와 동일한 단어를 선택 후 그 이후 순서대로 프로그램을 실행함.
 - 제어 키워드 : break; -> if 조건문을 제외한 가장 가까운 중괄호의 밖으로 탈출하게 된다.
 - 위의 이러한 특징 때문에 break; 하위에 코딩을 작성하면 컴파일 에러가 발생하게 된다.(실행이 불가한 코딩이므로)
 - 과거(1.7)에는 키워드에 '정수'만 사용하였으나, 현재 버전에서는 '문자열' 사용이 가능하다. (예제4_4 참고)

3. 반복문(+조건문)

 1) while 구문
 - 구조
 while(조건식) {
	//조건식이 참일때 반복 실행되는 영역
}

 2) do{} while() 구문
 - 구조
 do{
	// 조건식이 참일 때 실행됨.
} while(조건식);
 - while 구문과 차이점 : do while은 한번은 꼭 실행되어야 하는 반복인 경우 사용, while 구문은 조건식의 boolean 값을 
   검사 후 실행하지만, do while은 무조건 한번 실행 후 조건문을 따져서 반복 유무를 정한다.


 3) for 구문
 - 구조
 for(초기화식 ; 조건식 ; 증감식) {
	//조건식이 참일 때 실행됨.
}
 - 반복 횟수가 정해진 경우에 사용하는 형식.

 4) 제어 키워드
 - break : 반복 중단
 - continue : 현재 반복을 중단하고 증감식으로 넘어가는 키워드, 실행구문 건너뛰기

 5) 반복문 중첩
 - 반복문 안에 반복문이 있는 구조
 - 구구단 예제
 - 반복문에서 관례 
  -. i,j,k -> i = index(주소, 0부터 시작하는 순서 번호), j...k....
