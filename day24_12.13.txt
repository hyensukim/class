쓰레드
 - 프로세스 : 데이터 메모리 <- (쓰레드1 쓰레드2) : 한개의 데이터 공유
 - 쓰레드 : 작업대
 - interrupt()
  -. 중단 요청 -> interrupted 값 : true(내부적인 중단 요청 논리값)
  -. Interrupted Exception 발생.
 - boolean interrupted()
  -. 현재 interrupted 값을 반환 후 false(초기) 값으로 초기화.
 - boolean isUnterrupted()
  -. 현재 interrupted 값만 반환.

람다식(Lamda Expression) -> 최대한 짧게 쓰는게좋다
0. 함수형 프로그래밍
 - 함수? 하나의 독립적인 프로그램(하나의 반환값(출력값)을 반환하기 위한 것.)
 - 함수가 값이다 = 매개변수로 함수를 값으로 사용이 가능, 반환값으로 함수를 값으로 사용이 가능.
 - 자바스크립트

1. 람다식이란?
 - 메서드를 하나의 식으로 표현한 것.

2. 람다식 문법 살펴보기

3. 람다식 사용하기
 1) 람다식 구현하기

 2) 함수형 인터페이스(Functional Interface)
  - 1개의 추상메서드
  - default 메서드, static은 제한없이 사용 가능함.
 
 3) 함수형 인터페이스 타입의 매개변수와 반환 타입
★암기할 것.
 * java.util.funtion 패키지 -> 자바 내 자주 사용하는 함수형 인터페이스를 미리 구현해놓은 패키지
  1) 매개변수가 없고 반환형이 있는 함수.
	Supplier<T> ->T get()
  2) 매개변수가 1개 있고 반환형이 없는 함수.
	Consumer<T> -> void accept(T type)
  3) 매개변수가 1개 있고 반환형이 있는 함수.
 	Function<T,R> -> R return apply(T type)
  4) 매개변수는 1개 있고 반환값은  boolean으로 고정된 함수
	Predicate<T> -> boolean test(T type)

 * Bi로 시작하는 인터페이스의 매개변수가 2개
  1) BiConsumer<T,U> -> void accept(T t, U u)
  2) biFunction<T,U,R> -> R apply(T t, U u)
  3) Bipredicate<T,U> -> test(T t, U u)   

 * 매개변수, 반환형이 같은 자료형인 경우 좀 더 간단하게 사용하기 위한 인터페이스
  1) UnaryOperator<T> == Function<T,T> -> T apply(T t)
  2) BinaryOperator<T> == BiFunction<T,T,T> -> T apply(T t,T t) 

4. Function의 합성과 Predicate의 결합

5. 메서드의 축약