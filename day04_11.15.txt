11.15

복습
조건문
1. if(조건식) {}
2. if(조건식) {}~else{}
3. if(조건식) {}~else if(조건식) {}~ else{}

선택문
1. switch, case, break, default, switch(키워드){case 단어 : }

반복문
1. while(조건식){}
2. do{참, 거짓 상관없이 무조건 1번 실행함.}while(조건식); // 유일하게 세미클론이 나옴.
3. for(초기화식;조건식;증감식) // 반복횟수가 정해진 경우
for(int i =1; i <= 10; i++){}

반복문의 중복

==========================================================
1. 배열 -> 동일한 자료형(바이트 수가 다 동일함), 순차적 나열된 자료구조(★이러한 특징 덕분에 index 번호를 메길 수 있음★)
 -. 동일한 자료형의 데이터를 순차적으로 관리하는 구조 = 각각의 데이터가 순서대로 나열되어 관리된다는 의미.
 -. int 형 배열의 길이가 4개인 경우, 각 배열 공간마다 4byte(int)의 공간을 가지고 순차적으로 나열되어져 관리됨.
 -. 배열은 규칙이 일관성이 있어 좌우간 데이터의 접근 및 이동이 쉬우며, 처리 속도가 빠르다.
 -. index : 0부터 시작하며 1씩 커지는 순차적인 수, 배열에서 순서를 메겨주는 숫자로 쓰임.
 -. 배열 호출 메서드, Arrays.toString(참조변수);
 -. 쉽게 말해서, 연속되게 붙어서 나열된 변수라고 생각하면 된다.

2.배열 선언과 초기화
 -. 배열 선언 - 변수명을 지어주는 것.
 -. 선언 및 대입 방법
 -> 자료형[] 변수명 = new 자료형[공간의 갯수];(==자료형 변수명[])
 -. 초기화 - 값을 최초로 부여하는 것.
 -> 자료형[] 변수명 = new 자료형[] {값1,값2,값3}
 -> 축약 : 자료형[] 변수명 = {값1,값2,값3};
 -> 초기화 수 : 정수 - 0, 실수 - 0.0, 참조자료형 - null.(참조 자료형이 객체는 아니다)

3. 배열 사용하기
 -. 인덱스(index) 번호 : 각각의 배열 변수의 공간을 접근
 -. 인덱스 연산자
 [] -> 배열의 각각의 공간에 접근하는 연산자 -> 0,1,2,3,...
 -. length : 배열의 공간 갯수를 의미
 -. 초기 번호 0, 범위 0, 1씩 증가(index)가 있어 for 구문과 자주 사용된다.
 -. 향상된 for 구문
  -> for(자료형 요소 : 배열) {

}

4. 다차원 배열
 -. 차원수가 여러개로 이루어짐
 -. int nums = new int[ 갯수]; : 1차원 배열 (아파트 한동)
 -. int[][] nums = new  int[행][열]; : 2차원 배열 (아파트 단지, 여러동)
 -. int[][][] nums = new int[높이][가로][세로]; : 3차원 배열
 + 중첩된 for문과 함께 사용

======================================================================
객체 지향 프로그래밍1
1.객체
 -. object : 사물, 대상
  -> 사물, 대상을 정의하는 특징
  -> 특징을 가지고 하는 행위
 ex) 자동차 공장의 설계도(클래스) -> 자동차(객체) 생산 
     자동차 -> 특징 : 엔진, 연료, 바퀴,.. 행위 : 움직인다, 멈춘다, 후진한다...
 -. ★각각의 객체는 '상호작용'한다. ex) 학교(학생 - 선생), 쇼핑몰(상품 - 회원)
 ->이러한 객체들의 '상호작용'을 통해 무언가를 만드는 것을 '객체지향'이라고 한다.
 -. 객체와 클래스는 특징, 행위로 구성.
 -. 객체의 멤버변수,메서드 접근 -> 마침표연산자

2. 객체 지향 프로그래밍

3. 클래스
 -. 클래스 정의 문법
 -. 클래스 구성요소
  class 클래스명 {
	멤버 변수; - 특징
	메서드(); - 행위
}
 -. 클래스 명명 규칙(관례)
  -> 첫단어 영대문자 ex) Student.java(.class)
  -> 두 단어 이상 시 두번째 단어의 첫자도 영대문자이다.

4. 기본자료형과 참조자료형

5. 클래스와 인스턴스
 -. new 예약어

6. 패키지

7.메서드(함수)
 -. 함수 정의
 : 기능을 수행하는 일련의 코드, 함수는 어떤 기능을 수행하도록 미리 구형해 놀고 필요 시 호출하여 사용
 -. 메서드 구조
접근제한자 반환값(자료형) 메서드명(함수명) (매개변수,...){
	//함수 로직이 실행되는 영역
	return 반환값
}
매개변수 -> 입력 변수
중괄호 -> 함수 연산식
retrun 반환값 -> 결과값(함수가 끝난다. 결과값은 리턴-> 할당 받았던 스택 메모리를 삭제)

 -. 함수 이름
 -. 매개 변수(파라미터)
 -. 반환값
 -. main() 함수 : 프로그램 실행하면서 실행되는 메인 메서드, 자바 프로그램의 시작점.
  -> 항상 main이 실행 되어야 각 객체의 메서드(함수)를 실행할 수 있다. 그러므로
      main()은 가장 먼저 실행되고, 가장 마지막에 종료된다. -> stack 구조!!

* 메모리
 1. 데이터 영역

 2. 스택(stack) 영역 - 함수가 실행될 때(ex, 연산될 때) 변수의 공간을 할당 받는 메모리 영역.
 -. 함수 호출시, 실행 및 공간이 생성되고 실행이 끝나면 공간이 삭제된다.(지역변수)
 -. 메서드(매개변수) 실행 -> 스택 영역 메모리에 매개변수, 지역변수의 자료형에 맞는 공간 할당 ->실행(연산). 
 -. Queue(큐) : 대기줄, 순서번호표를 뽑다.
 -. 스택 구조(카트)
  ex) 넣은 순서 : 10원 -> 100원 -> 500원, 빼는 순서 : 500 -> 100 -> 10
  - 가장 먼저 넣은 것을 가장 마지막에 꺼낸다. (First In Last Out)
 -. 큐 구조(호스) 
  - 넣은 순서 : 1 -> 2 -> 3 -> 4 , 빼는 순서 : 1 -> 2 -> 3 -> 4
  - 가장 먼저 넣은 것을 가장 처음에 꺼낸다. (First In First Out)
 ------------
  4 3 2 1
   ->
 ------------

 3. 힙(heap) 영역 



















