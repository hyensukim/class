객체 지향 프로그래밍2
복습
상속 : class 하위클래스명 extends 상위클래스명 {}
 - 하위클래스의 객체가 상위클래스의 객체가 가진 자원(멤버변수, 메서드) 사용 가능.
 - 어떻게 사용 가능한것인가. 이유를 아는것이 중요하다 
 -> 객체를 생성해주는 것은 '생성자' 이다. -> 상위 클래스 객체가 먼저 생성된 다음
      하위 클래스 객체가 생성된다.
 -> 정확한 이유 : 하위클래스는 상위클래스의 확장된 클래스이므로, 하위 클래스에 상위클래스의
     자원들을 기본적으로 가지고 있어 사용이 가능한 것이다.
 - 접근제어자 private를 사용하여 상위클래스의 멤버변수를 제한한 경우, 하위클래스 객체에서 호출이
   제한된다.

super
 - 지역변수 : 생성된 상위 객체의 주소값.
 - 생성자 : 상위 클래스 생성자 메서드.

생성자 메서드 호출 순서(스택메모리)
C() -> B() -> A()
객체 생성 순서(힙메모리)
A -> B -> C

다형성 (우유 그림 설명)
 - 하위 클래스형의 객체가 상위 클래스형으로 다양하게 형태를 바꿀 수 있는 성질.

형변환
 - 상위 -> 하위 : 불가(출처가 불명) -> 명시적 형변형
 - 하위 -> 상위 : 가능(묵시적 형변형)
 - 출처 확인(오류발생방지) -> instanceof 연산자 == 출처불명한 참조변수 instanceof 해당 클래스(이게 해당 클래스 객체냐?)

메서드의 오버라이드(재정의)
 - 하위클래스에 상위클래스의 동일한 메서드를 재정의함.
 - 메서드 호출되는 메모리 : 메서드 영역에 하나만 존재하며 이 메서드는 주소값이 생기어, 동일 
   클래스형의 객체들은 하나의 메서드를 공유한다.(주소값을 똑같이 쓴다.)
 - 가상 메서드 테이블 : 객체마다 가지고 있는 가상의 테이블.
 Animal , move() / Human , 
 - 재정의 후 상의 클래스의 메서드를 호출해야 하는경우, super 예약어를 사용해 메서드를 호출하면 된다.

애노테이션 < Annotation : 주석,주해 -> 기능 X, 설명을 해주는 것.>
 -@Override : 재정의가 맞는지 체크(실수방지) : 상위 클래스에 정의된 메서드인지? 확인.
 - 컴파일러에 재정의 메서드라고 정보를 전달하는 것.


==============================================================
1. 추상클래스
 - 추상적, 정해지지 않은(멤버변수) <-> 구체적, 정해진(메서드)
 - 추상클래스 : abstract 예약어, 메서드가 정의되지 않은(구현체가 없는) 클래스. -> 자체 객체 생성 불가.
 - 공통적인 : 공통적인 개념들을 내부에 정의해놓고 공통분자의 클래스들에 공유해서 사용한다.
   ex) TV -> 전원을 켜고 킨다는 기능을 구현하여, 다른 TV에 공통적인 기능을 정의함.(다만, 자체 객체 불가)
 - 형식 : (pubilc) abstract class 클래스명 {}
 - 추상클래스는 메서드가 정의되지 않아 객체 생성이 불가능하다.
 - 추상클래스는 '상속'을 통해서만 추상클래스 내 추상메서드 사용이 가능하다.
 - 즉, 하위 클래스에서 반드시 추상 메서드를 구현해야 메서드 사용이 가능하고, 객체 생성이 가능하다.
 - 추상클래스를 사용하는 이유
    : 개발자가 클래스에서 따라야할 가이드라인(필요기능)을 제공하기 위해 사용.
 ex) InputStream class(추상)에 추상메서드(read())가 있고, 이러한 메서드는 FileInputStream과 같은 하위
      클래스에서 read()라는 메서드를 구현했다.(InputStream을 상속하면, 반드시 추상메서드를 구현해야
      한다는 가이드라인(규칙,표준)을 준다는 의미)
일반적으로 프로그램 설계 시에 자주 사용한다.

2. 추상클래스와 다형성
 - 하위클래스 객체 메모리의 일부분
 - 추상클래스에서도 변수를 사용할 수 있다 -> 상속만 받으면!! -> 상속 받은 상태에서 객체 생성시
    하위 클래스 내부에 상위 클래스의 자원이 있으므로.(다형성)

3. final 예약어 - 마지막, 변경 불가
 - 변수 -> 상수 // 데이터영역 상수
 - 메서드 -> 재정의 불가
 - 클래스 -> 상속 불가

4. 인터페이스 - 추상클래스의 연장이다.
 - 추상메서드로만 구성되어 있는 것.
 - API(Application Programming Interface)
 - interface : 규칙, 규약, 가이드라인, 설계
 -public abstract 라는 코딩이 자동으로 입력되므로 별도로 넣지 않아도 됨.
5. 클래스에서 인터페이스 구현하기

6. 인터페이스 구현과 형변환